# .github/workflows/deploy.yml
name: Deploy to AWS Batch

# Controls when the workflow will run
on:
  push:
    branches: [ "main" ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Set permissions for the GITHUB_TOKEN (needed for GitHub OIDC later)
permissions:
  id-token: write
  contents: read

# Environment variables used across the workflow
env:
  AWS_REGION: us-east-1
  TERRAFORM_DIR: './terraform'
  ECR_REPOSITORY: 'aws-batch-auditor-repo' # Must match the name in Terraform
  TF_VAR_s3_audit_bucket_name: ${{ secrets.TF_VAR_s3_audit_bucket_name }}


jobs:
  deploy:
    name: Deploy Infrastructure & Container
    runs-on: ubuntu-latest
    environment: production # Creates a deployment environment in GitHub

    steps:
    # Step 1: Checkout the repository code
    - name: Checkout code
      uses: actions/checkout@v4

    # Step 2: Configure AWS credentials
    # This is the SECURE way to authenticate using OIDC (Recommended)
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }} # See setup instructions below
        aws-region: ${{ env.AWS_REGION }}

    # Step 3: Set up Terraform
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0

    # Step 4: Initialize Terraform
    - name: Terraform Init
      run: terraform init
      working-directory: ${{ env.TERRAFORM_DIR }}

    # Step 5: Plan the Terraform deployment (optional but good practice)
    - name: Terraform Plan
      run: terraform plan -input=false
      working-directory: ${{ env.TERRAFORM_DIR }}

    # Step 6: Apply the Terraform configuration (deploys S3, ECR, IAM, Batch)
    - name: Terraform Apply
      run: terraform apply -auto-approve -input=false
      working-directory: ${{ env.TERRAFORM_DIR }}

    # Step 7: Get the ECR Repository URI from Terraform output
    - name: Get ECR Repository URI
      id: ecr-repo
      run: |
        echo "repository_url=$(terraform output -raw ecr_repository_url)" >> $GITHUB_OUTPUT
      working-directory: ${{ env.TERRAFORM_DIR }}

    # Step 8: Log in to Amazon ECR
    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2

    # Step 9: Build, tag, and push the Docker image to ECR
    - name: Build, Tag, and Push Docker image
      run: |
        docker build -t ${{ steps.ecr-repo.outputs.repository_url }}:latest .
        docker push ${{ steps.ecr-repo.outputs.repository_url }}:latest

    # Step 10: Submit a test job to AWS Batch
    - name: Submit Test Job to AWS Batch
      run: |
        JOB_DEFINITION=$(terraform output -raw batch_job_definition_name)
        JOB_QUEUE=$(terraform output -raw batch_job_queue_name)
        aws batch submit-job \
          --job-name "test-job-${GITHUB_SHA:0:8}" \
          --job-queue $JOB_QUEUE \
          --job-definition $JOB_DEFINITION \
          --region ${{ env.AWS_REGION }}